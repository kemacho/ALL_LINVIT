import re
import pandas as pd
from docx import Document
from docx.table import Table
from docx.text.paragraph import Paragraph

def extract_si_table_data(block):
    """
    –ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –°–ò" –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ 2-5 —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.
    """
    si_data = {
        "–°—Ç—Ä–æ–∫–∞ 2": ["" ,"", "", ""],
        "–°—Ç—Ä–æ–∫–∞ 3+4": ["", "", "", ""]
    }

    def before_comma(text):
        return text.split(",")[0].strip()

    for el in block:
        if isinstance(el, Table):
            first_cell_text = el.cell(0, 0).text.strip().lower()
            if "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏" in first_cell_text:
                rows = el.rows
                if len(rows) < 3:
                    return si_data

                def extract_columns(row):
                    cells = row.cells
                    cols = []
                    for idx in [1, 2, 3, 4]:
                        if idx < len(cells):
                            cols.append(before_comma(cells[idx].text.strip()))
                        else:
                            cols.append("")
                    return cols

                row2 = extract_columns(rows[1])

                if len(rows) == 3:
                    row3 = extract_columns(rows[2])
                    si_data["–°—Ç—Ä–æ–∫–∞ 2"] = row2
                    si_data["–°—Ç—Ä–æ–∫–∞ 3+4"] = row3
                elif len(rows) == 4:
                    row3 = extract_columns(rows[2])
                    row4 = extract_columns(rows[3])
                    combined = []
                    for c3, c4 in zip(row3, row4):
                        parts = []
                        if c3:
                            parts.append(c3)
                        if c4:
                            parts.append(c4)
                        combined.append(", ".join(parts))
                    si_data["–°—Ç—Ä–æ–∫–∞ 2"] = row2
                    si_data["–°—Ç—Ä–æ–∫–∞ 3+4"] = combined
                else:
                    # –µ—Å–ª–∏ –±–æ–ª—å—à–µ 4 —Å—Ç—Ä–æ–∫, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º 2 –∏ 3,4 –∫–∞–∫ –≤—ã—à–µ
                    si_data["–°—Ç—Ä–æ–∫–∞ 2"] = row2
                    si_data["–°—Ç—Ä–æ–∫–∞ 3+4"] = ["", "", "", ""]

                return si_data
    return si_data


# === 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç ===
doc = Document(r"U:\–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –ª–µ—Ç–æ 2024.docx")  # <-- –∑–∞–º–µ–Ω–∏ –ø—É—Ç—å

# === 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–µ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
elements = []
for block in doc.element.body:
    if block.tag.endswith("tbl"):
        elements.append(Table(block, doc))
    elif block.tag.endswith("p"):
        elements.append(Paragraph(block, doc))

# === 3. –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –±–ª–æ–∫–∞–º (–Ω–∞—á–∞–ª–æ ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —Å "–ó–∞–∫–∞–∑—á–∏–∫:")
blocks = []
current_block = []
is_first = True

for el in elements:
    text = ""
    if isinstance(el, Table):
        text = "\n".join(cell.text.strip() for row in el.rows for cell in row.cells)
    elif isinstance(el, Paragraph):
        text = el.text.strip()

    if "–ó–∞–∫–∞–∑—á–∏–∫:" in text:
        if not is_first and current_block:
            blocks.append(current_block)
            current_block = []
        is_first = False
    if not is_first:
        current_block.append(el)

if current_block:
    blocks.append(current_block)

# === 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ ===
results = []

month_map = {
    "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
    "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12"
}

for i, block in enumerate(blocks):
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ {i + 1} –∏–∑ {len(blocks)}")

    protocol_value = ""
    place_value = ""
    power_value = ""
    date_value = ""
    protocol_date = ""

    block_text = ""

    for el in block:
        if isinstance(el, Table):
            table_text = "\n".join(cell.text.strip() for row in el.rows for cell in row.cells)

            # –¢–∞–±–ª–∏—Ü–∞ —Å "–ó–∞–∫–∞–∑—á–∏–∫:" ‚Äî –±–µ—Ä—ë–º –¥–∞—Ç—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∞–≤–æ–π —è—á–µ–π–∫–∏
            if "–ó–∞–∫–∞–∑—á–∏–∫:" in table_text:
                last_row = el.rows[-1]
                if len(last_row.cells) > 0:
                    raw_date = last_row.cells[-1].text.strip().lower()
                    match = re.search(r"(\d{1,2})\s+([–∞-—è—ë]+)\s+(\d{4})", raw_date)
                    if match:
                        day, month_str, year = match.groups()
                        month = month_map.get(month_str)
                        if month:
                            protocol_date = f"{int(day):02d}.{month}.{year}"

            for row in el.rows:
                cells = row.cells
                # –ù–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–≤ —Ç–∞–±–ª–∏—Ü–µ 1√ó2)
                if len(cells) == 2:
                    left = cells[0].text.strip().upper()
                    right = cells[1].text.strip()
                    if "–ü–†–û–¢–û–ö–û–õ" in left and not protocol_value:
                        protocol_value = right
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
                for cell in row.cells:
                    block_text += " " + cell.text.strip()

        elif isinstance(el, Paragraph):
            block_text += " " + el.text.strip()

    # –ú–µ—Å—Ç–æ –≤ —Å—Ö–µ–º–µ
    place_match = re.search(r"–ú–µ—Å—Ç–æ \(–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ\) –≤ —Å—Ö–µ–º–µ:\s*(.*?)\s*U–Ω", block_text)
    if place_match:
        place_value = place_match.group(1).strip()

    # –¶–µ–Ω—Ç—Ä –ø–∏—Ç–∞–Ω–∏—è
    power_match = re.search(r"–¶–µ–Ω—Ç—Ä –ø–∏—Ç–∞–Ω–∏—è:\s*(.*?—Å\.—à\.\))", block_text)
    if power_match:
        power_value = power_match.group(1).strip()

    # –°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã)
    date_match = re.search(
        r"–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π:.*?—Å\s*(\d{2}\.\d{2}\.\d{4})\s+\d{2}:\d{2}\s+–ø–æ\s+(\d{2}\.\d{2}\.\d{4})",
        block_text
    )
    if date_match:
        date_value = f"{date_match.group(1)} ‚Äì {date_match.group(2)}"

    # --- –í—ã—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –°–ò" ---
    si_data = extract_si_table_data(block)

    results.append({
        "–ü—Ä–æ—Ç–æ–∫–æ–ª": protocol_value,
        "–ú–µ—Å—Ç–æ –≤ —Å—Ö–µ–º–µ": place_value,
        "–¶–µ–Ω—Ç—Ä –ø–∏—Ç–∞–Ω–∏—è": power_value,
        "–°—Ä–æ–∫–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π": date_value,
        "–î–∞—Ç–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞": protocol_date,

        "SI –°—Ç—Ä–æ–∫–∞ 2 - 2-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 2"][0],
        "SI –°—Ç—Ä–æ–∫–∞ 2 - 3-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 2"][1],
        "SI –°—Ç—Ä–æ–∫–∞ 2 - 4-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 2"][2],
        "SI –°—Ç—Ä–æ–∫–∞ 2 - 5-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 2"][3],

        "SI –°—Ç—Ä–æ–∫–∞ 3+4 - 2-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 3+4"][0],
        "SI –°—Ç—Ä–æ–∫–∞ 3+4 - 3-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 3+4"][1],
        "SI –°—Ç—Ä–æ–∫–∞ 3+4 - 4-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 3+4"][2],
        "SI –°—Ç—Ä–æ–∫–∞ 3+4 - 5-–π —Å—Ç–æ–ª–±–µ—Ü": si_data["–°—Ç—Ä–æ–∫–∞ 3+4"][3],
    })

# === 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel ===
df = pd.DataFrame(results)
df.to_excel(r"U:\test\—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.xlsx", index=False)

print("‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.xlsx'")