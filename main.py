
import sys
from pathlib import Path
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QWidget, QComboBox,
    QListWidget, QTabWidget, QTreeView, QFileSystemModel, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QDialog, QFormLayout, QDialogButtonBox, QMessageBox, QCheckBox
)
from PySide6.QtCore import Qt, QUrl, QThread, Signal
from PySide6.QtGui import QDesktopServices, QKeyEvent, QFont

ARCHIVE_PATH = Path(r"\\192.168.34.9\–ª–∏–Ω–≤–∏—Ç\–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò\USER49\!–ê–†–•–ò–í")  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞—Ä—Ö–∏–≤–∞

class CustomTreeView(QTreeView):
    """ –°–≤–æ–π QTreeView –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_viewer = parent

    def keyPressEvent(self, event: QKeyEvent):
        if event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
            index = self.currentIndex()
            self.parent_viewer.open_file(index)
        else:
            super().keyPressEvent(event)

class CreateCertDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")

        layout = QFormLayout()

        self.cert_number_input = QLineEdit()
        self.cert_name_input = QLineEdit()

        self.year_selector = QComboBox()
        self.year_selector.addItems(sorted(
            [folder.name for folder in ARCHIVE_PATH.iterdir() if folder.is_dir()]
        ))
        self.year_selector.currentTextChanged.connect(self.suggest_next_number)

        layout.addRow("–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", self.cert_number_input)
        layout.addRow("–î–æ–ø. –Ω–∞–∑–≤–∞–Ω–∏–µ:", self.cert_name_input)
        layout.addRow("–ì–æ–¥:", self.year_selector)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)

        layout.addWidget(buttons)
        self.setLayout(layout)

        self.suggest_next_number(self.year_selector.currentText())

    def suggest_next_number(self, year: str):
        year_path = ARCHIVE_PATH / year
        numbers = []

        if year_path.exists():
            for folder in year_path.iterdir():
                if folder.is_dir():
                    name = folder.name
                    if name[:3].isdigit():
                        numbers.append(int(name[:3]))

        next_number = max(numbers, default=0) + 1
        self.cert_number_input.setText(f"{next_number:03}")

    def get_data(self):
        return (
            self.cert_number_input.text().strip(),
            self.cert_name_input.text().strip(),
            self.year_selector.currentText()
        )

class ProjectLoaderThread(QThread):
    projects_loaded = Signal(list)

    def __init__(self, selected_year, parent=None):
        super().__init__(parent)
        self.selected_year = selected_year

    def run(self):
        projects = []
        if self.selected_year == "–í—Å–µ –≥–æ–¥—ã":
            for year_folder in sorted(ARCHIVE_PATH.iterdir()):
                if year_folder.is_dir():
                    for project in sorted(year_folder.iterdir()):
                        if project.is_dir():
                            projects.append((year_folder.name, project.name, project))
        else:
            year_path = ARCHIVE_PATH / self.selected_year
            if year_path.exists():
                for project in sorted(year_path.iterdir()):
                    if project.is_dir():
                        projects.append((self.selected_year, project.name, project))

        self.projects_loaded.emit(projects)

class ArchiveViewer(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –ê—Ä—Ö–∏–≤–∞")
        self.resize(1400, 800)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        self.year_selector = QComboBox()
        self.year_selector.addItem("–í—Å–µ –≥–æ–¥—ã")
        self.year_selector.addItems(sorted([folder.name for folder in ARCHIVE_PATH.iterdir() if folder.is_dir()]))
        self.year_selector.currentTextChanged.connect(self.update_projects)

        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
        self.search_bar.textChanged.connect(self.filter_projects)

        self.create_cert_button = QPushButton("–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        self.create_cert_button.clicked.connect(self.create_certificate)

        self.expand_folders_checkbox = QCheckBox("–†–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.expand_folders_checkbox.setChecked(False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ

        self.project_list = QListWidget()
        self.project_list.itemClicked.connect(self.update_tabs)

        self.tabs = QTabWidget()

        self.project_title = QLabel("")
        self.project_title.setAlignment(Qt.AlignCenter)
        self.project_title.setStyleSheet("font-size: 18px; font-weight: bold; padding: 5px;")

        # –†–∞–∑–º–µ—Ç–∫–∞
        left_layout = QVBoxLayout()
        left_layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:"))
        left_layout.addWidget(self.year_selector)
        left_layout.addWidget(QLabel("–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞:"))
        left_layout.addWidget(self.search_bar)

        left_layout.addWidget(self.expand_folders_checkbox)

        left_layout.addWidget(self.create_cert_button)
        left_layout.addWidget(QLabel("–ü—Ä–æ–µ–∫—Ç—ã:"))
        left_layout.addWidget(self.project_list)

        left_widget = QWidget()
        left_widget.setLayout(left_layout)

        right_layout = QVBoxLayout()
        right_layout.addWidget(self.project_title)
        right_layout.addWidget(self.tabs)

        right_widget = QWidget()
        right_widget.setLayout(right_layout)

        main_layout = QHBoxLayout()
        main_layout.addWidget(left_widget, 2)
        main_layout.addWidget(right_widget, 5)

        container = QWidget()

        container.setLayout(main_layout)
        self.setCentralWidget(container)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.all_projects = []  # [(–≥–æ–¥, –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞, –ø—É—Ç—å)]
        self.current_project_path = None
        self.update_projects("–í—Å–µ –≥–æ–¥—ã")

    def select_created_project(self, projects, folder_name):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"""
        for year, name, path in projects:
            if name == folder_name:
                self.all_projects = projects
                self.display_projects(projects)
                items = self.project_list.findItems(name, Qt.MatchExactly)
                if items:
                    item = items[0]
                    self.project_list.setCurrentItem(item)
                    self.update_tabs(item)
                break

    def on_projects_loaded(self, projects):
        self.all_projects = projects
        self.display_projects(projects)

    def update_projects(self, selected_year):
        """ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ """
        self.project_list.clear()
        self.all_projects.clear()
        self.project_list.addItem("–ó–∞–≥—Ä—É–∑–∫–∞...")

        self.loader_thread = ProjectLoaderThread(selected_year)
        self.loader_thread.projects_loaded.connect(self.on_projects_loaded)
        self.loader_thread.start()

    def display_projects(self, projects):
        """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞) """
        self.project_list.clear()
        for _, project_name, _ in projects:
            self.project_list.addItem(project_name)

    def filter_projects(self, text):
        """ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ """
        filtered = [(year, name, path) for (year, name, path) in self.all_projects if text.lower() in name.lower()]
        self.display_projects(filtered)

    def update_tabs(self, item):
        """ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        current_tab_index = self.tabs.currentIndex() if self.tabs.count() > 0 else -1

        self.tabs.clear()

        # –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö
        for i in range(self.project_list.count()):
            list_item = self.project_list.item(i)
            list_item.setFont(QFont())

        # –í—ã–¥–µ–ª—è–µ–º –∂–∏—Ä–Ω—ã–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        item.setFont(QFont("", weight=QFont.Bold))

        selected_project_name = item.text()

        # –ò—â–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
        for year, name, path in self.all_projects:
            if name == selected_project_name:
                self.current_project_path = path
                self.project_title.setText(f"{year} - {name}")
                break

        if self.current_project_path is None:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
        folders = {
            "–°–ò": self.current_project_path / "0. –°–ò",
            "–ò–ö-1": self.current_project_path / "1. –ò–ö-1",
            "–ò–ö-2": self.current_project_path / "2. –ò–ö-2",
        }

        for name, path in folders.items():
            if path.exists() and path.is_dir():
                view = CustomTreeView(self)
                model = QFileSystemModel()
                model.setRootPath(str(path))
                view.setModel(model)
                view.setRootIndex(model.index(str(path)))
                view.setColumnWidth(0, 400)

                view.doubleClicked.connect(self.open_file)

                # üìå –†–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–µ–Ω
                if self.expand_folders_checkbox.isChecked():
                    view.expandAll()

                self.tabs.addTab(view, name)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ
        if 0 <= current_tab_index < self.tabs.count():
            self.tabs.setCurrentIndex(current_tab_index)

    def open_file(self, index):
        """ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É –∏–ª–∏ Enter """
        view = self.tabs.currentWidget()
        if isinstance(view, QTreeView):
            model = view.model()
            file_path = model.filePath(index)
            if Path(file_path).is_file():
                QDesktopServices.openUrl(QUrl.fromLocalFile(file_path))

    def create_certificate(self):
        dialog = CreateCertDialog(self)
        if dialog.exec() == QDialog.Accepted:
            cert_number, cert_name, selected_year = dialog.get_data()

            if not cert_number:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.")
                return

            folder_name = cert_number
            if cert_name:
                folder_name += f" - {cert_name}"

            year_path = ARCHIVE_PATH / selected_year
            new_cert_path = year_path / folder_name

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –ø–µ—Ä–≤—ã–º 3 —Ü–∏—Ñ—Ä–∞–º
            existing_numbers = {p.name[:3] for p in year_path.iterdir() if p.is_dir()}
            if cert_number in existing_numbers:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º {cert_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
            si_folders = ['0 –ó–∞—è–≤–∫–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '1 –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ', '2 –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ',
                          '3 –ó–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –û–ú–î –∏ –¢–î',
                          '4 –ê–∫—Ç –≤—ã–±–æ—Ä–∞ –ü–ö', '5 –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –°–ò', '6 –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –°–ò', '7 –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑',
                          '8 –ê–∫—Ç –ü–ü', '9 –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑', '10 –†–µ—à–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ', '11 –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
                          '12 –î–æ–ø.–º–∞—Ç–µ—Ä–∏–∞–ª—ã']

            ik_folders = ['0 –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ', '1 –ü–∏—Å—å–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '2 –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–ö', '3 –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑',
                          '4 –ê–∫—Ç –≤—ã–±–æ—Ä–∞ –ü–ö', '5 –ê–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '6 –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –ò–ö', '7 –ê–∫—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ò–ö',
                          '8 –†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑', '9 –†–µ—à–µ–Ω–∏–µ –ø–æ –ò–ö', '10 –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã']

            structure = {
                "0. –°–ò": si_folders,
                "1. –ò–ö-1": ik_folders,
                "2. –ò–ö-2": ik_folders,
            }

            for main_folder, subfolders in structure.items():
                main_path = new_cert_path / main_folder
                main_path.mkdir(parents=True, exist_ok=True)
                for subfolder in subfolders:
                    subfolder_path = main_path / subfolder
                    subfolder_path.mkdir(parents=True, exist_ok=True)

                    if subfolder == '3 –ó–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –û–ú–î –∏ –¢–î':
                        for inner_folder in [
                            '3.1 –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –û–ú–î',
                            '3.2 –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¢–î –∏ –†–ü–ù',
                            '3.3 –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ü–ú'
                        ]:
                            (subfolder_path / inner_folder).mkdir(parents=True, exist_ok=True)

            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

            # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            self.loader_thread = ProjectLoaderThread(selected_year)
            self.loader_thread.projects_loaded.connect(
                lambda projects: self.select_created_project(projects, folder_name))
            self.loader_thread.start()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ArchiveViewer()
    window.show()
    sys.exit(app.exec())
